{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.messageChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.enterSend = e => {\n      if (e.keyCode === 13) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          this.send();\n        }\n      }\n    };\n\n    this.send = () => {\n      if (!this.state.message) {\n        alert(\"메시지를 입력하세요.\");\n      } else {\n        socket.emit('send', {\n          msg: this.state.message,\n          id: this.state.userId,\n          channel: this.state.channel\n        });\n        this.setState({\n          message: ''\n        });\n      }\n    };\n\n    this.state = {\n      message: '',\n      // 전송할 메시지(전체 채팅)\n      chatList: [],\n      // 메시지 리스트(전체 채팅)\n      userId: '',\n      // 유저 아이디\n      channel: 'channel',\n      // 채널(전체 채팅)\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false // 접속자 리스트 버튼\n\n    };\n  }\n\n  componentDidMount() {\n    // 유저 아이디 정보 얻기\n    axios.get('/api/users/id').then(({\n      data\n    }) => {\n      if (data) {\n        this.setState({\n          userId: data\n        });\n      } else {\n        window.location.href = \"/\";\n      } // this.props.propId(data);\n\n\n      socket.emit('channel', this.state.userId);\n    });\n\n    let _this = this; // 전체 채팅 기록 얻기\n\n\n    socket.on('receive', function (data) {\n      _this.setState({\n        chatList: _this.state.chatList.concat([data])\n      });\n\n      const scroll = this.scroll;\n      scroll.scrollTop = scroll.scrollHeight;\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', function (data) {\n      _this.setState({\n        userList: data\n      });\n    });\n  } // ****************************************************** // \n  // 사용자 인원 클릭\n  // ****************************************************** //\n\n\n  render() {\n    const {\n      chatList,\n      userList\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: {\n        size: 10,\n        offset: 1\n      },\n      sm: {\n        size: 10,\n        offset: 1\n      },\n      md: {\n        size: 6,\n        offset: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: \"chatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ChatTitleGroup, {\n      userList: userList,\n      dropdownOpen: this.state.dropdownOpen,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(CardBody, {\n      className: \"chatBody\",\n      ref: ref => {\n        this.scroll = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ChatListGroup, {\n      chatList: chatList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(CardBody, {\n      className: \"chatBtm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(ChatBtmGroup, {\n      messageChange: this.messageChange,\n      enterSend: this.enterSend,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Col","Card","CardBody","Container","axios","socketio","ChatTitleGroup","ChatListGroup","ChatBtmGroup","socket","Chatting","Component","constructor","props","toggle","setState","dropdownOpen","state","messageChange","e","message","target","value","enterSend","keyCode","shiftKey","preventDefault","send","alert","emit","msg","id","userId","channel","chatList","userList","componentDidMount","get","then","data","window","location","href","_this","on","concat","scroll","scrollTop","scrollHeight","render","size","offset","ref"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지(전체 채팅)\n\t\t\tchatList : [],\t\t\t// 메시지 리스트(전체 채팅)\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tchannel : 'channel',\t// 채널(전체 채팅)\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false\t// 접속자 리스트 버튼\n\t\t}\n\t}\n\t\n\tcomponentDidMount(){\n\t\t// 유저 아이디 정보 얻기\n\t\taxios.get('/api/users/id')\n\t\t.then(({ data }) => {\n\t\t\tif(data){\n                this.setState({ userId : data });\n            }\n            else{\n                window.location.href = \"/\";\n            }\n\t\t\t\n\t\t\t// this.props.propId(data);\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t\t\n\t\tlet _this = this;\n\t\t// 전체 채팅 기록 얻기\n\t\tsocket.on('receive', function(data) {\n\t\t\t_this.setState({ chatList : _this.state.chatList.concat([data]) });\n\n\t\t\tconst scroll = this.scroll;\n\t\t\tscroll.scrollTop = scroll.scrollHeight;\n\t\t});\n\t\t\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', function(data) {\n\t\t\t_this.setState({ userList : data });\n\t\t});\n\t}\n\n\t// ****************************************************** // \n\t// 사용자 인원 클릭\n\t// ****************************************************** //\n\ttoggle = () => {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// ****************************************************** // \n\t// 귓속말 대화창 열기\n\t// ****************************************************** //\n\t// whisperOpen = (e) => {\n\t// \tconst receiverId = e.target.innerText;\n\t\t\n\t// \tthis.props.propWhisper(receiverId);\n\t// }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 내용 변경\n\t// ****************************************************** //\n\tmessageChange = (e) => {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 엔터키\n\t// ****************************************************** //\n\tenterSend = (e) => {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 전송\n\t// ****************************************************** //\n\tsend = () => {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\tsocket.emit('send',{ msg : this.state.message, id : this.state.userId, channel : this.state.channel });\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Col xs={{size : 10, offset : 1}} sm={{size : 10, offset : 1}} md={{ size: 6, offset: 3 }} >\n\t\t\t\t\t\t<Card className=\"chat\" >\n\t\t\t\t\t\t\t<CardBody className=\"chatTitle\" >\n\t\t\t\t\t\t\t\t<ChatTitleGroup userList={userList} dropdownOpen={this.state.dropdownOpen} toggle={this.toggle}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className=\"chatBody\" ref={ref => { this.scroll = ref; }}>\n\t\t\t\t\t\t\t\t<ChatListGroup chatList={chatList}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className=\"chatBtm\">\n\t\t\t\t\t\t\t\t<ChatBtmGroup messageChange={this.messageChange} enterSend={this.enterSend} message={this.state.message}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}