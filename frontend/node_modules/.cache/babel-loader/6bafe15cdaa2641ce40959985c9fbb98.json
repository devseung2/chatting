{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUserId = () => {\n      axios.get('/api/users/id').then(({\n        data\n      }) => {\n        if (data) {\n          this.setState({\n            userId: data\n          });\n        } else {\n          window.location.href = \"/\";\n        }\n\n        socket.emit('channel', this.state.userId);\n      });\n    };\n\n    this.getAllMsgList = () => {\n      axios.get('/api/chats/messages', {\n        params: {\n          channel: \"channel\"\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          chatList: data\n        });\n        this.scrollToBottom();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.getWhisperMsgList = receiverId => {\n      axios.get('/api/whispers/messages', {\n        params: {\n          id: this.state.userId,\n          receiver: receiverId\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          whisperList: data\n        });\n        this.scrollToBottom();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      const scroll = this.refs.scroll;\n      scroll.scrollTop = scroll.scrollHeight;\n    };\n\n    this.toggle = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.whisperOpen = e => {\n      const receiverId = e.target.innerText;\n      this.setState({\n        receiver: receiverId,\n        chatList: [],\n        whisperList: []\n      });\n      this.getWhisperMsgList(receiverId);\n    };\n\n    this.whisperClose = () => {\n      this.setState({\n        receiver: \"\",\n        chatList: [],\n        whisperList: []\n      });\n      this.getAllMsgList();\n    };\n\n    this.messageChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.enterSend = e => {\n      if (e.keyCode === 13) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          this.send();\n        }\n      }\n    };\n\n    this.send = () => {\n      if (!this.state.message) {\n        alert(\"메시지를 입력하세요.\");\n      } else {\n        // 전체 채널 메시지 전송\n        if (!this.state.receiver) {\n          const sendInfo = {\n            msg: this.state.message,\n            id: this.state.userId,\n            channel: \"channel\"\n          };\n          axios.post('/api/chats/send', {\n            sendInfo: sendInfo\n          }).then(({\n            data\n          }) => {\n            // 모든 사람에게 메시지 전송\n            socket.emit('send', sendInfo);\n          }).catch(err => {\n            console.log(err);\n          });\n        } // 귓속말 메시지 전송\n        else {\n            const sendInfo = {\n              msg: this.state.message,\n              id: this.state.userId,\n              channel: this.state.receiver\n            };\n            axios.post('/api/chats/send', {\n              sendInfo: sendInfo\n            }).then(({\n              data\n            }) => {\n              socket.emit('whisperSend', sendInfo);\n            }).catch(err => {\n              console.log(err);\n            });\n          }\n\n        this.setState({\n          message: ''\n        });\n      }\n    };\n\n    this.state = {\n      message: '',\n      // 전송할 메시지\n      chatList: [],\n      // 메시지 리스트\n      whisperList: [],\n      // 귓속말 리스트\n      userId: '',\n      // 유저 아이디\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false,\n      // 접속자 리스트 버튼\n      receiver: ''\n    };\n    this.scroll = React.createRef();\n  }\n\n  componentDidMount() {\n    this.getUserId();\n    this.getAllMsgList(); // 전체 채팅 가져오기\n\n    socket.on('receive', data => {\n      this.setState({\n        chatList: this.state.chatList.concat([data])\n      });\n      this.scrollToBottom();\n    }); // 귓속말 채팅 가져오기\n\n    socket.on('whisperReceive', data => {\n      this.setState({\n        whisperList: this.state.whisperList.concat([data])\n      });\n      this.scrollToBottom();\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', data => {\n      this.setState({\n        userList: data\n      });\n    });\n  } // 유저 아이디 정보 얻기\n\n\n  render() {\n    const {\n      chatList,\n      userList,\n      receiver\n    } = this.state;\n    const ChatListGroup = \"\";\n\n    if (receiver) {\n      ChatListGroup = React.createElement(ChatListGroup, {\n        chatList: chatList,\n        whisperOpen: this.whisperOpen,\n        userId: this.state.userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      });\n    } else {}\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: {\n        size: 10,\n        offset: 1\n      },\n      sm: {\n        size: 10,\n        offset: 1\n      },\n      md: {\n        size: 6,\n        offset: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: \"chatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(ChatTitleGroup, {\n      userList: userList,\n      dropdownOpen: this.state.dropdownOpen,\n      toggle: this.toggle,\n      whisperOpen: this.whisperOpen,\n      whisperClose: this.whisperClose,\n      receiver: this.state.receiver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: \"scroll\",\n      className: \"chatBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, ChatListGroup)), React.createElement(CardBody, {\n      className: \"chatBtm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(ChatBtmGroup, {\n      messageChange: this.messageChange,\n      enterSend: this.enterSend,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Col","Card","CardBody","Container","axios","socketio","ChatTitleGroup","ChatListGroup","ChatBtmGroup","socket","Chatting","Component","constructor","props","getUserId","get","then","data","setState","userId","window","location","href","emit","state","getAllMsgList","params","channel","chatList","scrollToBottom","catch","err","console","log","getWhisperMsgList","receiverId","id","receiver","whisperList","scroll","refs","scrollTop","scrollHeight","toggle","dropdownOpen","whisperOpen","e","target","innerText","whisperClose","messageChange","message","value","enterSend","keyCode","shiftKey","preventDefault","send","alert","sendInfo","msg","post","userList","createRef","componentDidMount","on","concat","render","size","offset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,SAA9B,QAA+C,YAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAO,cAAP;AAEA,MAAMC,MAAM,GAAGJ,QAAQ,EAAvB;;AAEA,MAAMK,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAsCnBC,SAtCmB,GAsCP,MAAM;AACjBV,MAAAA,KAAK,CAACW,GAAN,CAAU,eAAV,EACCC,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,YAAGA,IAAH,EAAQ;AACK,eAAKC,QAAL,CAAc;AAAEC,YAAAA,MAAM,EAAGF;AAAX,WAAd;AACH,SAFV,MAGa;AACAG,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;;AACVb,QAAAA,MAAM,CAACc,IAAP,CAAY,SAAZ,EAAuB,KAAKC,KAAL,CAAWL,MAAlC;AACA,OATD;AAUA,KAjDkB;;AAAA,SAoDnBM,aApDmB,GAoDH,MAAM;AACrBrB,MAAAA,KAAK,CAACW,GAAN,CAAU,qBAAV,EAAiC;AAACW,QAAAA,MAAM,EAAG;AAACC,UAAAA,OAAO,EAAG;AAAX;AAAV,OAAjC,EACCX,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,aAAKC,QAAL,CAAc;AAAEU,UAAAA,QAAQ,EAAGX;AAAb,SAAd;AACA,aAAKY,cAAL;AACA,OAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OAPD;AAQA,KA7DkB;;AAAA,SAgEnBG,iBAhEmB,GAgEEC,UAAD,IAAgB;AACnC/B,MAAAA,KAAK,CAACW,GAAN,CAAU,wBAAV,EAAoC;AAACW,QAAAA,MAAM,EAAG;AAAEU,UAAAA,EAAE,EAAG,KAAKZ,KAAL,CAAWL,MAAlB;AAA0BkB,UAAAA,QAAQ,EAAGF;AAArC;AAAV,OAApC,EACCnB,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,aAAKC,QAAL,CAAc;AAAEoB,UAAAA,WAAW,EAAGrB;AAAhB,SAAd;AACA,aAAKY,cAAL;AACA,OAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OAPD;AAQA,KAzEkB;;AAAA,SA4EnBF,cA5EmB,GA4EF,MAAM;AACtB,YAAMU,MAAM,GAAG,KAAKC,IAAL,CAAUD,MAAzB;AACAA,MAAAA,MAAM,CAACE,SAAP,GAAmBF,MAAM,CAACG,YAA1B;AACA,KA/EkB;;AAAA,SAkFnBC,MAlFmB,GAkFV,MAAM;AACd,WAAKzB,QAAL,CAAc;AAAC0B,QAAAA,YAAY,EAAG,CAAC,KAAKpB,KAAL,CAAWoB;AAA5B,OAAd;AACA,KApFkB;;AAAA,SAuFnBC,WAvFmB,GAuFJC,CAAD,IAAO;AACpB,YAAMX,UAAU,GAAGW,CAAC,CAACC,MAAF,CAASC,SAA5B;AACA,WAAK9B,QAAL,CAAc;AAAEmB,QAAAA,QAAQ,EAAGF,UAAb;AAAyBP,QAAAA,QAAQ,EAAG,EAApC;AAAwCU,QAAAA,WAAW,EAAG;AAAtD,OAAd;AACA,WAAKJ,iBAAL,CAAuBC,UAAvB;AACA,KA3FkB;;AAAA,SA8FnBc,YA9FmB,GA8FJ,MAAM;AACpB,WAAK/B,QAAL,CAAc;AAAEmB,QAAAA,QAAQ,EAAG,EAAb;AAAiBT,QAAAA,QAAQ,EAAG,EAA5B;AAAgCU,QAAAA,WAAW,EAAG;AAA9C,OAAd;AACA,WAAKb,aAAL;AACA,KAjGkB;;AAAA,SAoGnByB,aApGmB,GAoGFJ,CAAD,IAAO;AACtB,WAAK5B,QAAL,CAAc;AAAEiC,QAAAA,OAAO,EAAGL,CAAC,CAACC,MAAF,CAASK;AAArB,OAAd;AACA,KAtGkB;;AAAA,SAyGnBC,SAzGmB,GAyGNP,CAAD,IAAO;AACZ,UAAGA,CAAC,CAACQ,OAAF,KAAc,EAAjB,EAAqB;AAC1B,YAAI,CAACR,CAAC,CAACS,QAAP,EAAgB;AACNT,UAAAA,CAAC,CAACU,cAAF;AACA,eAAKC,IAAL;AACT;AACK;AACJ,KAhHe;;AAAA,SAmHnBA,IAnHmB,GAmHZ,MAAM;AACZ,UAAG,CAAC,KAAKjC,KAAL,CAAW2B,OAAf,EAAuB;AACtBO,QAAAA,KAAK,CAAC,aAAD,CAAL;AACA,OAFD,MAGI;AACH;AACA,YAAG,CAAC,KAAKlC,KAAL,CAAWa,QAAf,EAAwB;AACvB,gBAAMsB,QAAQ,GAAG;AAAEC,YAAAA,GAAG,EAAG,KAAKpC,KAAL,CAAW2B,OAAnB;AAA4Bf,YAAAA,EAAE,EAAG,KAAKZ,KAAL,CAAWL,MAA5C;AAAoDQ,YAAAA,OAAO,EAAG;AAA9D,WAAjB;AAEAvB,UAAAA,KAAK,CAACyD,IAAN,CAAW,iBAAX,EAA8B;AAAEF,YAAAA,QAAQ,EAAGA;AAAb,WAA9B,EACC3C,IADD,CACM,CAAC;AAAEC,YAAAA;AAAF,WAAD,KAAc;AACnB;AACAR,YAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoBoC,QAApB;AACA,WAJD,EAKC7B,KALD,CAKOC,GAAG,IAAI;AACbC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAPD;AAQA,SAXD,CAYA;AAZA,aAaK;AACJ,kBAAM4B,QAAQ,GAAG;AAAEC,cAAAA,GAAG,EAAG,KAAKpC,KAAL,CAAW2B,OAAnB;AAA4Bf,cAAAA,EAAE,EAAG,KAAKZ,KAAL,CAAWL,MAA5C;AAAoDQ,cAAAA,OAAO,EAAG,KAAKH,KAAL,CAAWa;AAAzE,aAAjB;AAEAjC,YAAAA,KAAK,CAACyD,IAAN,CAAW,iBAAX,EAA8B;AAAEF,cAAAA,QAAQ,EAAGA;AAAb,aAA9B,EACC3C,IADD,CACM,CAAC;AAAEC,cAAAA;AAAF,aAAD,KAAc;AACnBR,cAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BoC,QAA3B;AACA,aAHD,EAIC7B,KAJD,CAIOC,GAAG,IAAI;AACbC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAND;AAOA;;AAED,aAAKb,QAAL,CAAc;AAAEiC,UAAAA,OAAO,EAAG;AAAZ,SAAd;AACA;AACD,KApJkB;;AAElB,SAAK3B,KAAL,GAAa;AACZ2B,MAAAA,OAAO,EAAG,EADE;AACI;AAChBvB,MAAAA,QAAQ,EAAG,EAFC;AAEK;AACjBU,MAAAA,WAAW,EAAG,EAHF;AAGO;AACnBnB,MAAAA,MAAM,EAAG,EAJG;AAIG;AACf2C,MAAAA,QAAQ,EAAG,EALC;AAKK;AACjBlB,MAAAA,YAAY,EAAG,KANH;AAMU;AACtBP,MAAAA,QAAQ,EAAG;AAPC,KAAb;AAUA,SAAKE,MAAL,GAAcxC,KAAK,CAACgE,SAAN,EAAd;AACA;;AAEDC,EAAAA,iBAAiB,GAAE;AAClB,SAAKlD,SAAL;AACA,SAAKW,aAAL,GAFkB,CAIlB;;AACAhB,IAAAA,MAAM,CAACwD,EAAP,CAAU,SAAV,EAAsBhD,IAAD,IAAU;AAC9B,WAAKC,QAAL,CAAc;AAAEU,QAAAA,QAAQ,EAAG,KAAKJ,KAAL,CAAWI,QAAX,CAAoBsC,MAApB,CAA2B,CAACjD,IAAD,CAA3B;AAAb,OAAd;AACA,WAAKY,cAAL;AACA,KAHD,EALkB,CAUlB;;AACApB,IAAAA,MAAM,CAACwD,EAAP,CAAU,gBAAV,EAA6BhD,IAAD,IAAU;AACrC,WAAKC,QAAL,CAAc;AAAEoB,QAAAA,WAAW,EAAG,KAAKd,KAAL,CAAWc,WAAX,CAAuB4B,MAAvB,CAA8B,CAACjD,IAAD,CAA9B;AAAhB,OAAd;AACA,WAAKY,cAAL;AACA,KAHD,EAXkB,CAgBlB;;AACApB,IAAAA,MAAM,CAACwD,EAAP,CAAU,iBAAV,EAA8BhD,IAAD,IAAU;AACtC,WAAKC,QAAL,CAAc;AAAE4C,QAAAA,QAAQ,EAAG7C;AAAb,OAAd;AACA,KAFD;AAGA,GApCqC,CAsCtC;;;AAiHAkD,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEvC,MAAAA,QAAF;AAAYkC,MAAAA,QAAZ;AAAsBzB,MAAAA;AAAtB,QAAmC,KAAKb,KAA9C;AAEA,UAAMjB,aAAa,GAAG,EAAtB;;AACA,QAAG8B,QAAH,EAAY;AACX9B,MAAAA,aAAa,GAAI,oBAAC,aAAD;AAAe,QAAA,QAAQ,EAAEqB,QAAzB;AAAmC,QAAA,WAAW,EAAE,KAAKiB,WAArD;AAAkE,QAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWL,MAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB;AACA,KAFD,MAGK,CAEJ;;AAED,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAACiD,QAAAA,IAAI,EAAG,EAAR;AAAYC,QAAAA,MAAM,EAAG;AAArB,OAAT;AAAkC,MAAA,EAAE,EAAE;AAACD,QAAAA,IAAI,EAAG,EAAR;AAAYC,QAAAA,MAAM,EAAG;AAArB,OAAtC;AAA+D,MAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAnB,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEP,QAA1B;AAAoC,MAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWoB,YAA7D;AAA2E,MAAA,MAAM,EAAE,KAAKD,MAAxF;AAAgG,MAAA,WAAW,EAAE,KAAKE,WAAlH;AAA+H,MAAA,YAAY,EAAE,KAAKI,YAAlJ;AAAgK,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWa,QAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,EAIC;AAAK,MAAA,GAAG,EAAC,QAAT;AAAkB,MAAA,SAAS,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE9B,aADF,CADD,CAJD,EASC,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AAAc,MAAA,aAAa,EAAE,KAAK2C,aAAlC;AAAiD,MAAA,SAAS,EAAE,KAAKG,SAAjE;AAA4E,MAAA,OAAO,EAAE,KAAK7B,KAAL,CAAW2B,OAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CATD,CADD,CADD,CADD,CADD;AAqBA;;AAvLqC;;AA0LvC,eAAezC,QAAf","sourcesContent":["import React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지\n\t\t\tchatList : [],\t\t\t// 메시지 리스트\n\t\t\twhisperList : [],\t\t// 귓속말 리스트\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false,\t// 접속자 리스트 버튼\n\t\t\treceiver : ''\n\t\t}\n\n\t\tthis.scroll = React.createRef();\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getUserId();\n\t\tthis.getAllMsgList();\n\t\t\n\t\t// 전체 채팅 가져오기\n\t\tsocket.on('receive', (data) => {\n\t\t\tthis.setState({ chatList : this.state.chatList.concat([data]) });\n\t\t\tthis.scrollToBottom();\n\t\t});\n\n\t\t// 귓속말 채팅 가져오기\n\t\tsocket.on('whisperReceive', (data) => {\n\t\t\tthis.setState({ whisperList : this.state.whisperList.concat([data]) });\n\t\t\tthis.scrollToBottom();\n\t\t});\n\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', (data) => {\n\t\t\tthis.setState({ userList : data });\n\t\t});\n\t}\n\n\t// 유저 아이디 정보 얻기\n\tgetUserId = () => {\n\t\taxios.get('/api/users/id')\n\t\t.then(({ data }) => {\n\t\t\tif(data){\n                this.setState({ userId : data });\n            }\n            else{\n                window.location.href = \"/\";\n            }\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t}\n\n\t// 모든 사람들의 메시지 얻기\n\tgetAllMsgList = () => {\n\t\taxios.get('/api/chats/messages', {params : {channel : \"channel\"} })\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({ chatList : data });\n\t\t\tthis.scrollToBottom();\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t});\n\t}\n\n\t// 선택한 상대방과의 귓속말 메시지 얻기\n\tgetWhisperMsgList = (receiverId) => {\n\t\taxios.get('/api/whispers/messages', {params : { id : this.state.userId, receiver : receiverId }})\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({ whisperList : data });\n\t\t\tthis.scrollToBottom();\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t});\n\t}\n\n\t// 스크롤 설정\n\tscrollToBottom = () => {\n\t\tconst scroll = this.refs.scroll;\n\t\tscroll.scrollTop = scroll.scrollHeight;\n\t}\n\n\t// 사용자 인원 클릭\n\ttoggle = () => {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// 귓속말 대화창 열기\n\twhisperOpen = (e) => {\n\t\tconst receiverId = e.target.innerText;\n\t\tthis.setState({ receiver : receiverId, chatList : [], whisperList : [] });\n\t\tthis.getWhisperMsgList(receiverId);\n\t}\n\n\t// 귓속말 대화창 닫기\n\twhisperClose = () => {\n\t\tthis.setState({ receiver : \"\", chatList : [], whisperList : [] });\n\t\tthis.getAllMsgList();\n\t}\n\t\n\t// 채팅 메시지 input 내용 변경\n\tmessageChange = (e) => {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// 채팅 메시지 input 엔터키\n\tenterSend = (e) => {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// 채팅 메시지 전송\n\tsend = () => {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\t// 전체 채널 메시지 전송\n\t\t\tif(!this.state.receiver){\n\t\t\t\tconst sendInfo = { msg : this.state.message, id : this.state.userId, channel : \"channel\" };\n\n\t\t\t\taxios.post('/api/chats/send', { sendInfo : sendInfo })\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\t// 모든 사람에게 메시지 전송\n\t\t\t\t\tsocket.emit('send', sendInfo );\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\t// 귓속말 메시지 전송\n\t\t\telse {\n\t\t\t\tconst sendInfo = { msg : this.state.message, id : this.state.userId, channel : this.state.receiver };\n\n\t\t\t\taxios.post('/api/chats/send', { sendInfo : sendInfo })\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tsocket.emit('whisperSend', sendInfo );\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList, receiver } = this.state;\n\n\t\tconst ChatListGroup = \"\";\n\t\tif(receiver){\n\t\t\tChatListGroup = (<ChatListGroup chatList={chatList} whisperOpen={this.whisperOpen} userId={this.state.userId} />)\n\t\t}\n\t\telse {\n\t\t\t\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Col xs={{size : 10, offset : 1}} sm={{size : 10, offset : 1}} md={{ size: 6, offset: 3 }} >\n\t\t\t\t\t\t<Card className=\"chat\" >\n\t\t\t\t\t\t\t<CardBody className=\"chatTitle\" >\n\t\t\t\t\t\t\t\t<ChatTitleGroup userList={userList} dropdownOpen={this.state.dropdownOpen} toggle={this.toggle} whisperOpen={this.whisperOpen} whisperClose={this.whisperClose} receiver={this.state.receiver}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<div ref=\"scroll\" className=\"chatBody\">\n\t\t\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t\t\t{ChatListGroup}\n\t\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<CardBody className=\"chatBtm\">\n\t\t\t\t\t\t\t\t<ChatBtmGroup messageChange={this.messageChange} enterSend={this.enterSend} message={this.state.message}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}