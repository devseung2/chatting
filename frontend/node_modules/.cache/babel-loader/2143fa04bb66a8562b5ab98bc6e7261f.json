{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Col, Form, FormGroup, Input, Button, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.whisperOpen = e => {\n      const receiverId = e.target.innerText;\n      this.props.propWhisper(receiverId);\n    };\n\n    this.messageChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.enterSend = e => {\n      if (e.keyCode === 13) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          this.send();\n        }\n      }\n    };\n\n    this.send = () => {\n      if (!this.state.message) {\n        alert(\"메시지를 입력하세요.\");\n      } else {\n        socket.emit('send', {\n          msg: this.state.message,\n          id: this.state.userId,\n          channel: this.state.channel\n        });\n        this.setState({\n          message: ''\n        });\n      }\n    };\n\n    this.state = {\n      message: '',\n      // 전송할 메시지(전체 채팅)\n      chatList: [],\n      // 메시지 리스트(전체 채팅)\n      userId: '',\n      // 유저 아이디\n      channel: 'channel',\n      // 채널(전체 채팅)\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false // 접속자 리스트 버튼\n\n    };\n  }\n\n  componentDidMount() {\n    // 유저 아이디 정보 얻기\n    axios.get('/api/account/id').then(({\n      data\n    }) => {\n      this.setState({\n        userId: data\n      });\n      this.props.propId(data);\n      socket.emit('channel', this.state.userId);\n    });\n\n    let _this = this; // 전체 채팅 기록 얻기\n\n\n    socket.on('receive', function (data) {\n      _this.setState({\n        chatList: _this.state.chatList.concat([data])\n      });\n\n      const scroll = this.scroll;\n      scroll.scrollTop = scroll.scrollHeight;\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', function (data) {\n      _this.setState({\n        userList: data\n      });\n    });\n  } // ****************************************************** // \n  // 사용자 인원 클릭\n  // ****************************************************** //\n\n\n  render() {\n    const {\n      chatList,\n      userList\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: {\n        size: 10,\n        offset: 1\n      },\n      sm: {\n        size: 10,\n        offset: 1\n      },\n      md: {\n        size: 6,\n        offset: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: \"ChatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      className: \"ChatBody\",\n      ref: ref => {\n        this.scroll = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ChatListGroup, {\n      chatList: chatList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(CardBody, {\n      className: \"ChatBtm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"textarea\",\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n      onChange: this.messageChange,\n      onKeyDown: this.enterSend,\n      value: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.send,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"\\uC804\\uC1A1\")))))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Col","Form","FormGroup","Input","Button","Card","CardBody","Container","axios","socketio","ChatListGroup","socket","Chatting","Component","constructor","props","toggle","setState","dropdownOpen","state","whisperOpen","e","receiverId","target","innerText","propWhisper","messageChange","message","value","enterSend","keyCode","shiftKey","preventDefault","send","alert","emit","msg","id","userId","channel","chatList","userList","componentDidMount","get","then","data","propId","_this","on","concat","scroll","scrollTop","scrollHeight","render","size","offset","ref"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Col, Form, FormGroup, Input, Button, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatListGroup from \"../../../../components/chatListGroup\"\nimport \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지(전체 채팅)\n\t\t\tchatList : [],\t\t\t// 메시지 리스트(전체 채팅)\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tchannel : 'channel',\t// 채널(전체 채팅)\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false\t// 접속자 리스트 버튼\n\t\t}\n\t}\n\t\n\tcomponentDidMount(){\n\t\t// 유저 아이디 정보 얻기\n\t\taxios.get('/api/account/id')\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({\n\t\t\t\tuserId: data\n\t\t\t});\n\t\t\t\n\t\t\tthis.props.propId(data);\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t\t\n\t\tlet _this = this;\n\t\t// 전체 채팅 기록 얻기\n\t\tsocket.on('receive', function(data) {\n\t\t\t_this.setState({ chatList : _this.state.chatList.concat([data]) });\n\n\t\t\tconst scroll = this.scroll;\n\t\t\tscroll.scrollTop = scroll.scrollHeight;\n\t\t});\n\t\t\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', function(data) {\n\t\t\t_this.setState({ userList : data });\n\t\t});\n\t}\n\n\t// ****************************************************** // \n\t// 사용자 인원 클릭\n\t// ****************************************************** //\n\ttoggle = () => {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// ****************************************************** // \n\t// 귓속말 대화창 열기\n\t// ****************************************************** //\n\twhisperOpen = (e) => {\n\t\tconst receiverId = e.target.innerText;\n\t\t\n\t\tthis.props.propWhisper(receiverId);\n\t}\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 내용 변경\n\t// ****************************************************** //\n\tmessageChange = (e) => {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 엔터키\n\t// ****************************************************** //\n\tenterSend = (e) => {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 전송\n\t// ****************************************************** //\n\tsend = () => {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\tsocket.emit('send',{ \n\t\t\tmsg : this.state.message, \n\t\t\tid : this.state.userId, \n\t\t\tchannel : this.state.channel });\n\t\t\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList } = this.state;\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Col xs={{size : 10, offset : 1}} sm={{size : 10, offset : 1}} md={{ size: 6, offset: 3 }} >\n\t\t\t\t\t\t<Card className=\"Chat\" >\n\t\t\t\t\t\t\t<CardBody className=\"ChatTitle\" >\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className=\"ChatBody\" ref={ref => { this.scroll = ref; }}>\n\t\t\t\t\t\t\t\t<ChatListGroup chatList={chatList}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className=\"ChatBtm\">\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"textarea\" placeholder=\"메시지를 입력해주세요.\" onChange={this.messageChange} onKeyDown={this.enterSend} value={this.state.message} />\n\t\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={this.send}>전송</Button>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}