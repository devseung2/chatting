{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Row, Col, Form, FormGroup, Input, Button, Toast, ToastBody, Card, CardBody, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.whisperOpen = e => {\n      const receiverId = e.target.innerText;\n      this.props.propWhisper(receiverId);\n    };\n\n    this.messageChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.enterSend = e => {\n      if (e.keyCode === 13) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          this.send();\n        }\n      }\n    };\n\n    this.send = () => {\n      if (!this.state.message) {\n        alert(\"메시지를 입력하세요.\");\n      } else {\n        socket.emit('send', {\n          msg: this.state.message,\n          id: this.state.userId,\n          channel: this.state.channel\n        });\n        this.setState({\n          message: ''\n        });\n      }\n    };\n\n    this.state = {\n      message: '',\n      // 전송할 메시지(전체 채팅)\n      chatList: [],\n      // 메시지 리스트(전체 채팅)\n      userId: '',\n      // 유저 아이디\n      channel: 'channel',\n      // 채널(전체 채팅)\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false // 접속자 리스트 버튼\n\n    };\n  }\n\n  componentDidUpdate() {\n    const scroll = document.getElementsByClassName('scroll')[0];\n    scroll.scrollTop = scroll.scrollHeight;\n  }\n\n  componentDidMount() {\n    // 유저 아이디 정보 얻기\n    axios.get('/api/account/id').then(({\n      data\n    }) => {\n      this.setState({\n        userId: data\n      });\n      this.props.propId(data);\n      socket.emit('channel', this.state.userId);\n    });\n\n    let _this = this; // 전체 채팅 기록 얻기\n\n\n    socket.on('receive', function (data) {\n      _this.setState({\n        chatList: _this.state.chatList.concat([data])\n      });\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', function (data) {\n      _this.setState({\n        userList: data\n      });\n    });\n  } // ****************************************************** // \n  // 사용자 인원 클릭\n  // ****************************************************** //\n\n\n  render() {\n    const {\n      chatList,\n      userList\n    } = this.state; // ****************************************************** // \n    // 전체 채널 접속자 수\n    // ****************************************************** //\n\n    const users = userList.map((user, index) => {\n      return React.createElement(DropdownItem, {\n        key: index,\n        onClick: this.whisperOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, user.id);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: {\n        size: 10,\n        offset: 1\n      },\n      sm: {\n        size: 10,\n        offset: 1\n      },\n      md: {\n        size: 6,\n        offset: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: \"ChatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"\\uC804\\uCCB4 \\uCC44\\uD305\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      color: \"link\",\n      className: \"UserId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faUser,\n      className: \"icon-size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), \" \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, userList.length)), React.createElement(DropdownMenu, {\n      modifiers: {\n        setMaxHeight: {\n          enabled: true,\n          order: 890,\n          fn: data => {\n            return { ...data,\n              styles: { ...data.styles,\n                overflow: 'auto',\n                maxHeight: '100px'\n              }\n            };\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, users))), React.createElement(CardBody, {\n      className: [\"ChatBody\", \"scroll\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, messages), React.createElement(CardBody, {\n      className: \"ChatBtm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"textarea\",\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n      onChange: this.messageChange,\n      onKeyDown: this.enterSend,\n      value: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.send,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"\\uC804\\uC1A1\")))))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Row","Col","Form","FormGroup","Input","Button","Toast","ToastBody","Card","CardBody","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Container","FontAwesomeIcon","faUser","axios","moment","socketio","socket","Chatting","Component","constructor","props","toggle","setState","dropdownOpen","state","whisperOpen","e","receiverId","target","innerText","propWhisper","messageChange","message","value","enterSend","keyCode","shiftKey","preventDefault","send","alert","emit","msg","id","userId","channel","chatList","userList","componentDidUpdate","scroll","document","getElementsByClassName","scrollTop","scrollHeight","componentDidMount","get","then","data","propId","_this","on","concat","render","users","map","user","index","size","offset","length","setMaxHeight","enabled","order","fn","styles","overflow","maxHeight","messages"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Row, Col, Form, FormGroup, Input, Button, Toast, ToastBody, Card, CardBody,\n\t   Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지(전체 채팅)\n\t\t\tchatList : [],\t\t\t// 메시지 리스트(전체 채팅)\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tchannel : 'channel',\t// 채널(전체 채팅)\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false\t// 접속자 리스트 버튼\n\t\t}\n\t}\n\t\n\tcomponentDidUpdate() {\n\t\tconst scroll = document.getElementsByClassName('scroll')[0];\n\t\tscroll.scrollTop = scroll.scrollHeight;\n\t}\n\t\n\tcomponentDidMount(){\n\t\t// 유저 아이디 정보 얻기\n\t\taxios.get('/api/account/id')\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({\n\t\t\t\tuserId: data\n\t\t\t});\n\t\t\t\n\t\t\tthis.props.propId(data);\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t\t\n\t\tlet _this = this;\n\t\t// 전체 채팅 기록 얻기\n\t\tsocket.on('receive', function(data) {\n\t\t\t_this.setState({ chatList : _this.state.chatList.concat([data]) });\n\t\t});\n\t\t\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', function(data) {\n\t\t\t_this.setState({ userList : data });\n\t\t});\n\t}\n\n\t// ****************************************************** // \n\t// 사용자 인원 클릭\n\t// ****************************************************** //\n\ttoggle = () => {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// ****************************************************** // \n\t// 귓속말 대화창 열기\n\t// ****************************************************** //\n\twhisperOpen = (e) => {\n\t\tconst receiverId = e.target.innerText;\n\t\t\n\t\tthis.props.propWhisper(receiverId);\n\t}\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 내용 변경\n\t// ****************************************************** //\n\tmessageChange = (e) => {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 엔터키\n\t// ****************************************************** //\n\tenterSend = (e) => {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 전송\n\t// ****************************************************** //\n\tsend = () => {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\tsocket.emit('send',{ \n\t\t\tmsg : this.state.message, \n\t\t\tid : this.state.userId, \n\t\t\tchannel : this.state.channel });\n\t\t\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList } = this.state;\n\t\t\n\t\t\n\n\t\t// ****************************************************** // \n\t\t// 전체 채널 접속자 수\n\t\t// ****************************************************** //\n\t\tconst users = userList.map((user, index) => {\n\t\t\treturn (\n\t\t\t\t<DropdownItem key={index} onClick={this.whisperOpen}>{user.id}</DropdownItem>\n\t\t\t)\n\t\t});\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Col xs={{size : 10, offset : 1}} sm={{size : 10, offset : 1}} md={{ size: 6, offset: 3 }} >\n\t\t\t\t\t\t<Card className=\"Chat\" >\n\t\t\t\t\t\t\t<CardBody className=\"ChatTitle\" >\n\t\t\t\t\t\t\t\t<div>전체 채팅</div>\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n\t\t\t\t\t\t\t\t\t<DropdownToggle color=\"link\" className=\"UserId\">\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUser} className=\"icon-size\" /> <span>{userList.length}</span>\n\t\t\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t\t\t<DropdownMenu modifiers={{ setMaxHeight: {enabled: true, order: 890, fn: (data) => { return { ...data, styles: { ...data.styles, overflow: 'auto', maxHeight: '100px', }, };},},}} >\n\t\t\t\t\t\t\t\t\t{users}\n\t\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className={[\"ChatBody\", \"scroll\"]}>\n\t\t\t\t\t\t\t\t{messages}\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<CardBody className=\"ChatBtm\">\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"textarea\" placeholder=\"메시지를 입력해주세요.\" onChange={this.messageChange} onKeyDown={this.enterSend} value={this.state.message} />\n\t\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={this.send}>전송</Button>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}