{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUserList = () => {\n      // 모든 사람들의 메시지 얻기\n      axios.get('/api/chats/messages', {\n        params: {\n          channel: \"channel\"\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          chatList: data\n        });\n        this.scrollToBottom();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.getUserId = () => {\n      axios.get('/api/users/id').then(({\n        data\n      }) => {\n        if (data) {\n          this.setState({\n            userId: data\n          });\n        } else {\n          window.location.href = \"/\";\n        }\n\n        socket.emit('channel', this.state.userId);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      const scroll = this.refs.scroll;\n      scroll.scrollTop = scroll.scrollHeight;\n    };\n\n    this.toggle = () => {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.whisperOpen = e => {\n      const receiverId = e.target.innerText;\n      this.setState({\n        receiver: receiverId,\n        chatList: [],\n        channel: receiverId\n      }); // 선택한 상대방과의 귓속말 메시지 얻기\n\n      axios.get('/api/whispers/messages', {\n        params: {\n          id: this.state.userId,\n          receiver: receiverId\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          chatList: data\n        });\n        this.scrollToBottom();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.whisperClose = () => {\n      this.setState({\n        receiver: \"\",\n        chatList: [],\n        channel: \"channel\"\n      });\n    };\n\n    this.messageChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.enterSend = e => {\n      if (e.keyCode === 13) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          this.send();\n        }\n      }\n    };\n\n    this.send = () => {\n      if (!this.state.message) {\n        alert(\"메시지를 입력하세요.\");\n      } else {\n        const sendInfo = {\n          msg: this.state.message,\n          id: this.state.userId,\n          channel: this.state.channel\n        };\n        axios.post('/api/chats/send', {\n          sendInfo: sendInfo\n        }).then(({\n          data\n        }) => {\n          // 모든 사람에게 메시지 전송\n          socket.emit('send', sendInfo);\n        }).catch(err => {\n          console.log(err);\n        });\n        this.setState({\n          message: ''\n        });\n      }\n    };\n\n    this.state = {\n      message: '',\n      // 전송할 메시지(전체 채팅)\n      chatList: [],\n      // 메시지 리스트(전체 채팅)\n      userId: '',\n      // 유저 아이디\n      channel: 'channel',\n      // 채널(전체 채팅)\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false,\n      // 접속자 리스트 버튼\n      receiver: ''\n    };\n    this.scroll = React.createRef();\n  }\n\n  componentDidMount() {\n    getUserId();\n    getUserList(); // 실시간으로 채팅 가져오기\n\n    socket.on('receive', data => {\n      this.setState({\n        chatList: this.state.chatList.concat([data])\n      });\n      this.scrollToBottom();\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', data => {\n      this.setState({\n        userList: data\n      });\n    });\n  }\n\n  render() {\n    const {\n      chatList,\n      userList\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: {\n        size: 10,\n        offset: 1\n      },\n      sm: {\n        size: 10,\n        offset: 1\n      },\n      md: {\n        size: 6,\n        offset: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: \"chatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(ChatTitleGroup, {\n      userList: userList,\n      dropdownOpen: this.state.dropdownOpen,\n      toggle: this.toggle,\n      whisperOpen: this.whisperOpen,\n      receiver: this.state.receiver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: \"scroll\",\n      className: \"chatBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(ChatListGroup, {\n      chatList: chatList,\n      whisperOpen: this.whisperOpen,\n      userId: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(CardBody, {\n      className: \"chatBtm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(ChatBtmGroup, {\n      messageChange: this.messageChange,\n      enterSend: this.enterSend,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Col","Card","CardBody","Container","axios","socketio","ChatTitleGroup","ChatListGroup","ChatBtmGroup","socket","Chatting","Component","constructor","props","getUserList","get","params","channel","then","data","setState","chatList","scrollToBottom","catch","err","console","log","getUserId","userId","window","location","href","emit","state","scroll","refs","scrollTop","scrollHeight","toggle","dropdownOpen","whisperOpen","e","receiverId","target","innerText","receiver","id","whisperClose","messageChange","message","value","enterSend","keyCode","shiftKey","preventDefault","send","alert","sendInfo","msg","post","userList","createRef","componentDidMount","on","concat","render","size","offset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,SAA9B,QAA+C,YAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAO,cAAP;AAEA,MAAMC,MAAM,GAAGJ,QAAQ,EAAvB;;AAEA,MAAMK,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAkCnBC,WAlCmB,GAkCL,MAAM;AACnB;AACAV,MAAAA,KAAK,CAACW,GAAN,CAAU,qBAAV,EAAiC;AAACC,QAAAA,MAAM,EAAG;AAACC,UAAAA,OAAO,EAAG;AAAX;AAAV,OAAjC,EACCC,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAGF;AAAb,SAAd;AACA,aAAKG,cAAL;AACA,OAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OAPD;AAQA,KA5CkB;;AAAA,SA+CnBG,SA/CmB,GA+CP,MAAM;AACjBvB,MAAAA,KAAK,CAACW,GAAN,CAAU,eAAV,EACCG,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,YAAGA,IAAH,EAAQ;AACK,eAAKC,QAAL,CAAc;AAAEQ,YAAAA,MAAM,EAAGT;AAAX,WAAd;AACH,SAFV,MAGa;AACAU,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;;AAEVtB,QAAAA,MAAM,CAACuB,IAAP,CAAY,SAAZ,EAAuB,KAAKC,KAAL,CAAWL,MAAlC;AACA,OAVD;AAWA,KA3DkB;;AAAA,SA6DnBN,cA7DmB,GA6DF,MAAM;AACtB,YAAMY,MAAM,GAAG,KAAKC,IAAL,CAAUD,MAAzB;AACAA,MAAAA,MAAM,CAACE,SAAP,GAAmBF,MAAM,CAACG,YAA1B;AACA,KAhEkB;;AAAA,SAqEnBC,MArEmB,GAqEV,MAAM;AACd,WAAKlB,QAAL,CAAc;AAACmB,QAAAA,YAAY,EAAG,CAAC,KAAKN,KAAL,CAAWM;AAA5B,OAAd;AACA,KAvEkB;;AAAA,SA4EnBC,WA5EmB,GA4EJC,CAAD,IAAO;AACpB,YAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,SAA5B;AACA,WAAKxB,QAAL,CAAc;AAAEyB,QAAAA,QAAQ,EAAGH,UAAb;AAAyBrB,QAAAA,QAAQ,EAAG,EAApC;AAAwCJ,QAAAA,OAAO,EAAGyB;AAAlD,OAAd,EAFoB,CAIpB;;AACAtC,MAAAA,KAAK,CAACW,GAAN,CAAU,wBAAV,EAAoC;AAACC,QAAAA,MAAM,EAAG;AAAE8B,UAAAA,EAAE,EAAG,KAAKb,KAAL,CAAWL,MAAlB;AAA0BiB,UAAAA,QAAQ,EAAGH;AAArC;AAAV,OAApC,EACCxB,IADD,CACM,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AACnB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAGF;AAAb,SAAd;AACA,aAAKG,cAAL;AACA,OAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OAPD;AAQA,KAzFkB;;AAAA,SA8FnBuB,YA9FmB,GA8FJ,MAAM;AACpB,WAAK3B,QAAL,CAAc;AAAEyB,QAAAA,QAAQ,EAAG,EAAb;AAAiBxB,QAAAA,QAAQ,EAAG,EAA5B;AAAgCJ,QAAAA,OAAO,EAAG;AAA1C,OAAd;AAGA,KAlGkB;;AAAA,SAuGnB+B,aAvGmB,GAuGFP,CAAD,IAAO;AACtB,WAAKrB,QAAL,CAAc;AAAE6B,QAAAA,OAAO,EAAGR,CAAC,CAACE,MAAF,CAASO;AAArB,OAAd;AACA,KAzGkB;;AAAA,SA8GnBC,SA9GmB,GA8GNV,CAAD,IAAO;AACZ,UAAGA,CAAC,CAACW,OAAF,KAAc,EAAjB,EAAqB;AAC1B,YAAI,CAACX,CAAC,CAACY,QAAP,EAAgB;AACNZ,UAAAA,CAAC,CAACa,cAAF;AACA,eAAKC,IAAL;AACT;AACK;AACJ,KArHe;;AAAA,SA0HnBA,IA1HmB,GA0HZ,MAAM;AACZ,UAAG,CAAC,KAAKtB,KAAL,CAAWgB,OAAf,EAAuB;AACtBO,QAAAA,KAAK,CAAC,aAAD,CAAL;AACA,OAFD,MAGI;AACH,cAAMC,QAAQ,GAAG;AAAEC,UAAAA,GAAG,EAAG,KAAKzB,KAAL,CAAWgB,OAAnB;AAA4BH,UAAAA,EAAE,EAAG,KAAKb,KAAL,CAAWL,MAA5C;AAAoDX,UAAAA,OAAO,EAAG,KAAKgB,KAAL,CAAWhB;AAAzE,SAAjB;AAEAb,QAAAA,KAAK,CAACuD,IAAN,CAAW,iBAAX,EAA8B;AAAEF,UAAAA,QAAQ,EAAGA;AAAb,SAA9B,EACCvC,IADD,CACM,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAc;AACnB;AACAV,UAAAA,MAAM,CAACuB,IAAP,CAAY,MAAZ,EAAoByB,QAApB;AACA,SAJD,EAKClC,KALD,CAKOC,GAAG,IAAI;AACbC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,SAPD;AASA,aAAKJ,QAAL,CAAc;AAAE6B,UAAAA,OAAO,EAAG;AAAZ,SAAd;AACA;AACD,KA5IkB;;AAElB,SAAKhB,KAAL,GAAa;AACZgB,MAAAA,OAAO,EAAG,EADE;AACI;AAChB5B,MAAAA,QAAQ,EAAG,EAFC;AAEK;AACjBO,MAAAA,MAAM,EAAG,EAHG;AAGG;AACfX,MAAAA,OAAO,EAAG,SAJE;AAIS;AACrB2C,MAAAA,QAAQ,EAAG,EALC;AAKK;AACjBrB,MAAAA,YAAY,EAAG,KANH;AAMU;AACtBM,MAAAA,QAAQ,EAAG;AAPC,KAAb;AAUA,SAAKX,MAAL,GAAcnC,KAAK,CAAC8D,SAAN,EAAd;AACA;;AAEDC,EAAAA,iBAAiB,GAAE;AAClBnC,IAAAA,SAAS;AACTb,IAAAA,WAAW,GAFO,CAKlB;;AACAL,IAAAA,MAAM,CAACsD,EAAP,CAAU,SAAV,EAAsB5C,IAAD,IAAU;AAC9B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAG,KAAKY,KAAL,CAAWZ,QAAX,CAAoB2C,MAApB,CAA2B,CAAC7C,IAAD,CAA3B;AAAb,OAAd;AACA,WAAKG,cAAL;AACA,KAHD,EANkB,CAWlB;;AACAb,IAAAA,MAAM,CAACsD,EAAP,CAAU,iBAAV,EAA8B5C,IAAD,IAAU;AACtC,WAAKC,QAAL,CAAc;AAAEwC,QAAAA,QAAQ,EAAGzC;AAAb,OAAd;AACA,KAFD;AAIA;;AA+GD8C,EAAAA,MAAM,GAAG;AACR,UAAM;AAAE5C,MAAAA,QAAF;AAAYuC,MAAAA;AAAZ,QAAyB,KAAK3B,KAApC;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAACiC,QAAAA,IAAI,EAAG,EAAR;AAAYC,QAAAA,MAAM,EAAG;AAArB,OAAT;AAAkC,MAAA,EAAE,EAAE;AAACD,QAAAA,IAAI,EAAG,EAAR;AAAYC,QAAAA,MAAM,EAAG;AAArB,OAAtC;AAA+D,MAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAnB,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEP,QAA1B;AAAoC,MAAA,YAAY,EAAE,KAAK3B,KAAL,CAAWM,YAA7D;AAA2E,MAAA,MAAM,EAAE,KAAKD,MAAxF;AAAgG,MAAA,WAAW,EAAE,KAAKE,WAAlH;AAA+H,MAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWY,QAApJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,EAIC;AAAK,MAAA,GAAG,EAAC,QAAT;AAAkB,MAAA,SAAS,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAExB,QAAzB;AAAmC,MAAA,WAAW,EAAE,KAAKmB,WAArD;AAAkE,MAAA,MAAM,EAAE,KAAKP,KAAL,CAAWL,MAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,CAJD,EASC,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AAAc,MAAA,aAAa,EAAE,KAAKoB,aAAlC;AAAiD,MAAA,SAAS,EAAE,KAAKG,SAAjE;AAA4E,MAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWgB,OAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CATD,CADD,CADD,CADD,CADD;AAqBA;;AAtKqC;;AAyKvC,eAAevC,QAAf","sourcesContent":["import React from \"react\";\nimport { Col, Card, CardBody, Container } from \"reactstrap\";\nimport axios from \"axios\";\nimport socketio from \"socket.io-client\";\nimport ChatTitleGroup from \"../../../../components/chatTitleGroup\";\nimport ChatListGroup from \"../../../../components/chatListGroup\";\nimport ChatBtmGroup from \"../../../../components/chatBtmGroup\";\nimport \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지(전체 채팅)\n\t\t\tchatList : [],\t\t\t// 메시지 리스트(전체 채팅)\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tchannel : 'channel',\t// 채널(전체 채팅)\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false,\t// 접속자 리스트 버튼\n\t\t\treceiver : ''\n\t\t}\n\n\t\tthis.scroll = React.createRef();\n\t}\n\n\tcomponentDidMount(){\n\t\tgetUserId();\n\t\tgetUserList();\n\t\t\n\n\t\t// 실시간으로 채팅 가져오기\n\t\tsocket.on('receive', (data) => {\n\t\t\tthis.setState({ chatList : this.state.chatList.concat([data]) });\n\t\t\tthis.scrollToBottom();\n\t\t});\n\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', (data) => {\n\t\t\tthis.setState({ userList : data });\n\t\t});\n\n\t}\n\n\n\tgetUserList = () => {\n\t\t// 모든 사람들의 메시지 얻기\n\t\taxios.get('/api/chats/messages', {params : {channel : \"channel\"} })\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({ chatList : data });\n\t\t\tthis.scrollToBottom();\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t});\n\t}\n\n\t// 유저 아이디 정보 얻기\n\tgetUserId = () => {\n\t\taxios.get('/api/users/id')\n\t\t.then(({ data }) => {\n\t\t\tif(data){\n                this.setState({ userId : data });\n            }\n            else{\n                window.location.href = \"/\";\n            }\n\t\t\t\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t}\n\n\tscrollToBottom = () => {\n\t\tconst scroll = this.refs.scroll;\n\t\tscroll.scrollTop = scroll.scrollHeight;\n\t}\n\n\t// ****************************************************** // \n\t// 사용자 인원 클릭\n\t// ****************************************************** //\n\ttoggle = () => {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// ****************************************************** // \n\t// 귓속말 대화창 열기\n\t// ****************************************************** //\n\twhisperOpen = (e) => {\n\t\tconst receiverId = e.target.innerText;\n\t\tthis.setState({ receiver : receiverId, chatList : [], channel : receiverId });\n\t\t\n\t\t// 선택한 상대방과의 귓속말 메시지 얻기\n\t\taxios.get('/api/whispers/messages', {params : { id : this.state.userId, receiver : receiverId }})\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({ chatList : data });\n\t\t\tthis.scrollToBottom();\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t});\n\t}\n\n\t// ****************************************************** // \n\t// 귓속말 대화창 닫기\n\t// ****************************************************** //\n\twhisperClose = () => {\n\t\tthis.setState({ receiver : \"\", chatList : [], channel : \"channel\" });\n\n\t\t\n\t}\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 내용 변경\n\t// ****************************************************** //\n\tmessageChange = (e) => {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 엔터키\n\t// ****************************************************** //\n\tenterSend = (e) => {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 전송\n\t// ****************************************************** //\n\tsend = () => {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\tconst sendInfo = { msg : this.state.message, id : this.state.userId, channel : this.state.channel };\n\n\t\t\taxios.post('/api/chats/send', { sendInfo : sendInfo })\n\t\t\t.then(({ data }) => {\n\t\t\t\t// 모든 사람에게 메시지 전송\n\t\t\t\tsocket.emit('send', sendInfo );\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Col xs={{size : 10, offset : 1}} sm={{size : 10, offset : 1}} md={{ size: 6, offset: 3 }} >\n\t\t\t\t\t\t<Card className=\"chat\" >\n\t\t\t\t\t\t\t<CardBody className=\"chatTitle\" >\n\t\t\t\t\t\t\t\t<ChatTitleGroup userList={userList} dropdownOpen={this.state.dropdownOpen} toggle={this.toggle} whisperOpen={this.whisperOpen} receiver={this.state.receiver}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t<div ref=\"scroll\" className=\"chatBody\">\n\t\t\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t\t\t<ChatListGroup chatList={chatList} whisperOpen={this.whisperOpen} userId={this.state.userId} />\n\t\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<CardBody className=\"chatBtm\">\n\t\t\t\t\t\t\t\t<ChatBtmGroup messageChange={this.messageChange} enterSend={this.enterSend} message={this.state.message}/>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}