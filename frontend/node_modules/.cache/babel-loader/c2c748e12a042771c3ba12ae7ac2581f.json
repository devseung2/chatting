{"ast":null,"code":"var _jsxFileName = \"/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx\";\nimport React from \"react\";\nimport { Row, Col, Form, FormGroup, Input, Button, Toast, ToastBody, Card, CardBody, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport style from \"./style.scss\";\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      // 전송할 메시지(전체 채팅)\n      chatList: [],\n      // 메시지 리스트(전체 채팅)\n      userId: '',\n      // 유저 아이디\n      channel: 'channel',\n      // 채널(전체 채팅)\n      userList: [],\n      // 접속한 유저 리스트\n      dropdownOpen: false // 접속자 리스트 버튼\n\n    };\n    this.messageChange = this.messageChange.bind(this);\n    this.send = this.send.bind(this);\n    this.enterSend = this.enterSend.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.whisperOpen = this.whisperOpen.bind(this);\n  }\n\n  componentDidUpdate() {\n    const scroll = document.getElementsByClassName('scroll')[0];\n    scroll.scrollTop = scroll.scrollHeight;\n  }\n\n  componentDidMount() {\n    // 유저 아이디 정보 얻기\n    axios.get('/api/account/id').then(({\n      data\n    }) => {\n      this.setState({\n        userId: data\n      });\n      this.props.propId(data);\n      socket.emit('channel', this.state.userId);\n    });\n\n    let _this = this; // 전체 채팅 기록 얻기\n\n\n    socket.on('receive', function (data) {\n      _this.setState({\n        chatList: _this.state.chatList.concat([data])\n      });\n    }); // 전체 사용자 정보 얻기\n\n    socket.on('receiveUserList', function (data) {\n      _this.setState({\n        userList: data\n      });\n    });\n  } // ****************************************************** // \n  // 사용자 인원 클릭\n  // ****************************************************** //\n\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  } // ****************************************************** // \n  // 귓속말 대화창 열기\n  // ****************************************************** //\n\n\n  whisperOpen(e) {\n    const receiverId = e.target.innerText;\n    this.props.propWhisper(receiverId);\n  } // ****************************************************** // \n  // 전체 채팅 메시지 input 내용 변경\n  // ****************************************************** //\n\n\n  messageChange(e) {\n    this.setState({\n      message: e.target.value\n    });\n  } // ****************************************************** // \n  // 전체 채팅 메시지 input 엔터키\n  // ****************************************************** //\n\n\n  enterSend(e) {\n    if (e.keyCode === 13) {\n      if (!e.shiftKey) {\n        e.preventDefault();\n        this.send();\n      }\n    }\n  } // ****************************************************** // \n  // 전체 채팅 메시지 전송\n  // ****************************************************** //\n\n\n  send() {\n    if (!this.state.message) {\n      alert(\"메시지를 입력하세요.\");\n    } else {\n      socket.emit('send', {\n        msg: this.state.message,\n        id: this.state.userId,\n        channel: this.state.channel\n      });\n      this.setState({\n        message: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      chatList,\n      userList\n    } = this.state; // ****************************************************** // \n    // 전체 채팅 메시지 리스트 얻기\n    // 중복이니깐 어떻게 할 방법 없는가\n    // ****************************************************** //\n\n    const messages = chatList.map((msg, index) => {\n      const replaceMsg = msg.chat.msg.split('\\n').map((content, index) => {\n        return React.createElement(\"span\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, content, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }));\n      });\n      const date = moment(msg.chat.date).format('YYYY-MM-DD A hh:mm');\n\n      if (msg.chat.id == this.state.userId) {\n        return React.createElement(Row, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(Col, {\n          xs: {\n            size: 6,\n            offset: 6\n          },\n          sm: {\n            size: 6,\n            offset: 6\n          },\n          md: {\n            size: 6,\n            offset: 6\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(Toast, {\n          className: style.Msg,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(ToastBody, {\n          className: style.MyMsgContent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, replaceMsg)), React.createElement(\"div\", {\n          className: style.MsgDate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, date)));\n      } else {\n        return React.createElement(Row, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(Col, {\n          xs: {\n            size: 6\n          },\n          sm: {\n            size: 6\n          },\n          md: {\n            size: 6\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          onClick: this.whisperOpen,\n          className: style.MsgUserId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, msg.chat.id)), React.createElement(Toast, {\n          className: style.Msg,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(ToastBody, {\n          className: style.MsgContent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, replaceMsg)), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: style.MsgDate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, date)));\n      }\n    }); // ****************************************************** // \n    // 전체 채널 접속자 수\n    // ****************************************************** //\n\n    const users = userList.map((user, index) => {\n      return React.createElement(DropdownItem, {\n        key: index,\n        onClick: this.whisperOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, user.id);\n    });\n    return React.createElement(Col, {\n      sm: \"12\",\n      md: {\n        size: 5,\n        offset: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: style.Chat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      className: style.ChatTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"\\uC804\\uCCB4 \\uCC44\\uD305\"), React.createElement(Dropdown, {\n      isOpen: this.state.dropdownOpen,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(DropdownToggle, {\n      color: \"link\",\n      className: style.UserId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faUser,\n      className: \"icon-size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), \" \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, userList.length)), React.createElement(DropdownMenu, {\n      modifiers: {\n        setMaxHeight: {\n          enabled: true,\n          order: 890,\n          fn: data => {\n            return { ...data,\n              styles: { ...data.styles,\n                overflow: 'auto',\n                maxHeight: '100px'\n              }\n            };\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, users))), React.createElement(CardBody, {\n      className: [style.ChatBody, \"scroll\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, messages), React.createElement(CardBody, {\n      className: style.ChatBtm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"textarea\",\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n      onChange: this.messageChange,\n      onKeyDown: this.enterSend,\n      value: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.send,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"\\uC804\\uC1A1\")))));\n  }\n\n}\n\nexport default Chatting;","map":{"version":3,"sources":["/Users/shs/Desktop/chatting/client/src/pages/chat/container/chatting/index.jsx"],"names":["React","Row","Col","Form","FormGroup","Input","Button","Toast","ToastBody","Card","CardBody","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","FontAwesomeIcon","faUser","axios","moment","socketio","style","socket","Chatting","Component","constructor","props","state","message","chatList","userId","channel","userList","dropdownOpen","messageChange","bind","send","enterSend","toggle","whisperOpen","componentDidUpdate","scroll","document","getElementsByClassName","scrollTop","scrollHeight","componentDidMount","get","then","data","setState","propId","emit","_this","on","concat","e","receiverId","target","innerText","propWhisper","value","keyCode","shiftKey","preventDefault","alert","msg","id","render","messages","map","index","replaceMsg","chat","split","content","date","format","size","offset","Msg","MyMsgContent","MsgDate","MsgUserId","MsgContent","users","user","Chat","ChatTitle","UserId","length","setMaxHeight","enabled","order","fn","styles","overflow","maxHeight","ChatBody","ChatBtm"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Row, Col, Form, FormGroup, Input, Button, Toast, ToastBody, Card, CardBody,\n\t   Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport socketio from \"socket.io-client\";\nimport style from \"./style.scss\";\n\nconst socket = socketio();\n\nclass Chatting extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmessage : '',\t\t\t// 전송할 메시지(전체 채팅)\n\t\t\tchatList : [],\t\t\t// 메시지 리스트(전체 채팅)\n\t\t\tuserId : '',\t\t\t// 유저 아이디\n\t\t\tchannel : 'channel',\t// 채널(전체 채팅)\n\t\t\tuserList : [],\t\t\t// 접속한 유저 리스트\n\t\t\tdropdownOpen : false\t// 접속자 리스트 버튼\n\t\t}\n\t\t\n\t\tthis.messageChange = this.messageChange.bind(this);\n\t\tthis.send = this.send.bind(this);\n\t\tthis.enterSend = this.enterSend.bind(this);\n\t\tthis.toggle = this.toggle.bind(this);\n\t\tthis.whisperOpen = this.whisperOpen.bind(this);\n\t}\n\t\n\tcomponentDidUpdate() {\n\t\tconst scroll = document.getElementsByClassName('scroll')[0];\n\t\tscroll.scrollTop = scroll.scrollHeight;\n\t}\n\t\n\tcomponentDidMount(){\n\t\t// 유저 아이디 정보 얻기\n\t\taxios.get('/api/account/id')\n\t\t.then(({ data }) => {\n\t\t\tthis.setState({\n\t\t\t\tuserId: data\n\t\t\t});\n\t\t\t\n\t\t\tthis.props.propId(data);\n\t\t\tsocket.emit('channel', this.state.userId);\n\t\t});\n\t\t\n\t\tlet _this = this;\n\t\t// 전체 채팅 기록 얻기\n\t\tsocket.on('receive', function(data) {\n\t\t\t_this.setState({ chatList : _this.state.chatList.concat([data]) });\n\t\t});\n\t\t\n\t\t// 전체 사용자 정보 얻기\n\t\tsocket.on('receiveUserList', function(data) {\n\t\t\t_this.setState({ userList : data });\n\t\t});\n\t}\n\n\t// ****************************************************** // \n\t// 사용자 인원 클릭\n\t// ****************************************************** //\n\ttoggle() {\n\t\tthis.setState({dropdownOpen : !this.state.dropdownOpen});\n\t}\n\t\n\t// ****************************************************** // \n\t// 귓속말 대화창 열기\n\t// ****************************************************** //\n\twhisperOpen(e) {\n\t\tconst receiverId = e.target.innerText;\n\t\t\n\t\tthis.props.propWhisper(receiverId);\n\t}\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 내용 변경\n\t// ****************************************************** //\n\tmessageChange(e) {\n\t\tthis.setState({ message : e.target.value });\n\t}\n\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 input 엔터키\n\t// ****************************************************** //\n\tenterSend(e) {\n        if(e.keyCode === 13) {\n\t\t\tif (!e.shiftKey){\n            \te.preventDefault();\n            \tthis.send();\n\t\t\t}\n        }\n    }\n\t\n\t// ****************************************************** // \n\t// 전체 채팅 메시지 전송\n\t// ****************************************************** //\n\tsend() {\n\t\tif(!this.state.message){\n\t\t\talert(\"메시지를 입력하세요.\");\n\t\t}\n\t\telse{\n\t\t\tsocket.emit('send',{ \n\t\t\tmsg : this.state.message, \n\t\t\tid : this.state.userId, \n\t\t\tchannel : this.state.channel });\n\t\t\n\t\t\tthis.setState({ message : '' });\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { chatList, userList } = this.state;\n\t\t\n\t\t// ****************************************************** // \n\t\t// 전체 채팅 메시지 리스트 얻기\n\t\t// 중복이니깐 어떻게 할 방법 없는가\n\t\t// ****************************************************** //\n\t\tconst messages = chatList.map((msg, index) => {\n\t\t\tconst replaceMsg = msg.chat.msg.split('\\n').map( (content, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<span key={index}>{content}<br/></span>\n\t\t\t\t)\n\t\t\t});\n\t\t\t\n\t\t\tconst date = moment(msg.chat.date).format('YYYY-MM-DD A hh:mm');\n\t\t\tif(msg.chat.id == this.state.userId){\n\t\t\t\treturn(\n\t\t\t\t\t<Row key={index} >\n\t\t\t\t\t\t<Col xs={{ size : 6, offset : 6}} sm={{ size : 6, offset : 6}} md={{ size : 6, offset : 6}} >\n\t\t\t\t\t\t\t<Toast className={style.Msg}>\n\t\t\t\t\t\t\t\t<ToastBody className={style.MyMsgContent}>\n\t\t\t\t\t\t\t\t\t{replaceMsg}\n\t\t\t\t\t\t\t\t</ToastBody>\n\t\t\t\t\t\t\t</Toast>\n\t\t\t\t\t\t\t<div className={style.MsgDate}>{date}</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t)\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn(\n\t\t\t\t\t<Row key={index} >\n\t\t\t\t\t\t<Col xs={{ size : 6}} sm={{ size : 6 }} md={{ size : 6 }}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span onClick={this.whisperOpen} className={style.MsgUserId}>{msg.chat.id}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Toast className={style.Msg}>\n\t\t\t\t\t\t\t\t<ToastBody className={style.MsgContent}>\n\t\t\t\t\t\t\t\t\t{replaceMsg}\n\t\t\t\t\t\t\t\t</ToastBody>\n\t\t\t\t\t\t\t</Toast>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className={style.MsgDate}>{date}</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t)\n\t\t\t}\n\t\t});\t\n\n\t\t// ****************************************************** // \n\t\t// 전체 채널 접속자 수\n\t\t// ****************************************************** //\n\t\tconst users = userList.map((user, index) => {\n\t\t\treturn (\n\t\t\t\t<DropdownItem key={index} onClick={this.whisperOpen}>{user.id}</DropdownItem>\n\t\t\t)\n\t\t});\n\t\t\n\t\treturn (\n\t\t\t<Col sm=\"12\" md={{ size: 5, offset: 1 }} >\n\t\t\t\t<Card className={style.Chat} >\n\t\t\t\t\t<CardBody className={style.ChatTitle} >\n\t\t\t\t\t\t<div>전체 채팅</div>\n\t\t\t\t\t\t<Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n\t\t\t\t\t\t\t<DropdownToggle color=\"link\" className={style.UserId}>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUser} className=\"icon-size\" /> <span>{userList.length}</span>\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu modifiers={{ setMaxHeight: {enabled: true, order: 890, fn: (data) => { return { ...data, styles: { ...data.styles, overflow: 'auto', maxHeight: '100px', }, };},},}} >\n\t\t\t\t\t\t\t{users}\n\t\t\t\t\t\t  </DropdownMenu>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</CardBody>\n\t\t\t\t\t<CardBody className={[style.ChatBody, \"scroll\"]}>\n\t\t\t\t\t\t{messages}\n\t\t\t\t\t</CardBody>\n\t\t\t\t\t<CardBody className={style.ChatBtm}>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t<Input type=\"textarea\" placeholder=\"메시지를 입력해주세요.\" onChange={this.messageChange} onKeyDown={this.enterSend} value={this.state.message} />\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<Button color=\"primary\" onClick={this.send}>전송</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</CardBody>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t);\n\t}\n}\n\t\nexport default Chatting;"]},"metadata":{},"sourceType":"module"}